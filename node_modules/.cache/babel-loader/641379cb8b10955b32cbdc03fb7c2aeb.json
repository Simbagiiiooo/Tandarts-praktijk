{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ralf2\\\\Desktop\\\\Tandarts-praktijk\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { patients, dentists, assistants } from \"./utils\";\nimport { createAppointments } from \"./createAppointments\";\nimport Home from \"./Home\";\nimport Calendar from \"./Calendar\";\nimport Day from \"./Day\";\n\nconst App = () => {\n  const [dentalPractice, setDentalPractice] = useState({\n    patients: [],\n    dentists: [],\n    assistants: [],\n    appointments: [],\n    appointments_by_day: []\n  });\n  useEffect(() => {\n    const addPatients = [...dentalPractice.patients, ...patients];\n    const addDentists = [...dentalPractice.dentists, ...dentists];\n    const addAssistants = [...dentalPractice.dentists, ...assistants];\n    const addAppointments = [...dentalPractice.appointments, ...createAppointments(patients, dentists, assistants)];\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        patients: addPatients,\n        dentists: addDentists,\n        assistants: addAssistants,\n        appointments: addAppointments,\n        appointments_by_day: addAppointments.filter(app => {\n          return app.day === 1;\n        })\n      };\n    });\n  }, []);\n\n  const addDentist = event => {\n    event.preventDefault();\n    const [name, surname, email, phone] = event.target;\n    const newDentist = [{\n      id: dentalPractice.dentists.length + 1,\n      name: name.value,\n      surname: surname.value,\n      email: email.value,\n      phone: phone.value,\n      not_available_due_illness: false,\n      dentalcrew: true\n    }];\n    const dentistState = [...dentalPractice.dentists, ...newDentist];\n    const addAppointments = createAppointments(dentalPractice.patients, dentistState, dentalPractice.assistants);\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        dentists: dentistState,\n        appointments: addAppointments\n      };\n    });\n  };\n\n  const addPatient = event => {\n    event.preventDefault();\n    const [name, surname, email, phone] = event.target;\n    const newPatient = [{\n      id: dentalPractice.patients.length + 1,\n      name: name.value,\n      surname: surname.value,\n      email: email.value,\n      phone: phone.value\n    }];\n    const patientState = [...dentalPractice.patients, ...newPatient];\n    const addAppointments = createAppointments(patientState, dentalPractice.dentists, dentalPractice.assistants);\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        patients: patientState,\n        appointments: addAppointments\n      };\n    });\n  };\n\n  const handleSickness = (event, id) => {\n    const report = event.target.value === \"true\" ? true : false;\n    const dentistState = [...dentalPractice.dentists];\n    dentistState.map(dentist => {\n      return dentist.id === id ? dentist.not_available_due_illness = report : null;\n    });\n    const addAppointments = createAppointments(dentalPractice.patients, dentistState, dentalPractice.assistants);\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        dentists: dentistState,\n        appointments: addAppointments\n      };\n    });\n  };\n\n  const checkDentistAssistant = (dentistID, assistantID, day, time) => {\n    const filterByDentist = dentalPractice.appointments.some(appointment => {\n      if ( //dentist\n      appointment.dentist.id === dentistID && appointment.day === day && appointment.time === time) {\n        return appointment;\n      }\n\n      if ( //assistant\n      appointment.assistant.id === assistantID && appointment.day === day && appointment.time === time) return appointment;\n      return false;\n    });\n    return filterByDentist;\n  };\n\n  const addApointmentSubmit = event => {\n    event.preventDefault(); //form values\n\n    const [day, time, patient, dentist, assistant] = event.target; //dentist data\n\n    const findDentist = dentalPractice.dentists.find(person => {\n      return person.id === parseInt(dentist.value);\n    }); //assistent data\n\n    const findAssistant = dentalPractice.assistants.find(person => {\n      return person.id === parseInt(assistant.value);\n    }); //create a new appointment\n\n    let newAppointMent = {\n      day: parseInt(day.value),\n      time: parseInt(time.value),\n      patient: patient.value,\n      dentist: findDentist,\n      assistant: findAssistant\n    };\n\n    const filterDateTime = (newAppointMent, dentalPractice) => {\n      const dentist = newAppointMent.dentist.id;\n      const assistant = newAppointMent.assistant.id;\n      const day = newAppointMent.day;\n      const time = newAppointMent.time;\n      const filterByDentist = checkDentistAssistant(dentist, assistant, day, time);\n\n      if (!filterByDentist) {\n        const appointmentsState = [...dentalPractice.appointments];\n        appointmentsState.unshift(newAppointMent);\n        setDentalPractice(prevState => {\n          return { ...prevState,\n            appointments: appointmentsState\n          };\n        });\n      } else {\n        alert(\"The dentist or assistant is not available on this day / time.\");\n      }\n    };\n\n    if (day.value !== \"\" && time.value !== \"\" && patient.value !== \"Choose Patient\" && assistant.value !== \"Choose Assistant\") {\n      filterDateTime(newAppointMent, dentalPractice);\n    } else {\n      alert(\"fill in all the fields @ add appointment\");\n    }\n  };\n\n  const deleteAppointment = (id, day) => {\n    if (day !== \"day\") {\n      const appointmentsCopy = [...dentalPractice.appointments];\n      const updatedAppointments = appointmentsCopy.filter(item => {\n        return item.id !== id;\n      });\n      const appointmentDayCopy = [...dentalPractice.appointments_by_day];\n      const updatedDay = appointmentDayCopy.filter(item => {\n        return item.id !== id;\n      });\n      setDentalPractice(prevState => {\n        return { ...prevState,\n          appointments: updatedAppointments,\n          appointments_by_day: updatedDay\n        };\n      });\n    } else {\n      const appointmentDayCopy = [...dentalPractice.appointments_by_day];\n      const updatedAppointmentsDay = appointmentDayCopy.filter(item => {\n        return item.id !== id;\n      });\n      setDentalPractice(prevState => {\n        return { ...prevState,\n          appointments_by_day: updatedAppointmentsDay\n        };\n      });\n    }\n  };\n\n  const selectDay = event => {\n    const appointmentsByDay = dentalPractice.appointments.filter(app => app.day === parseInt(event.target.value));\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        appointments_by_day: appointmentsByDay\n      };\n    });\n  };\n\n  const patientAvailable = (name, surname) => {\n    const appointments = [...dentalPractice.appointments]; // filter appointments\n\n    const updatedAppointments = appointments.filter(appointment => {\n      return appointment.patient !== `${name} ${surname}`;\n    }); //return newstate\n\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        appointments: updatedAppointments\n      };\n    });\n  };\n\n  const rescheduleHandler = (event, oldValues) => {\n    event.preventDefault();\n    const [id, time, day] = event.target;\n    const appointments = [...dentalPractice.appointments]; //filter out actual appointment\n\n    const actualAppointment = appointments.filter(appointment => {\n      return appointment.id === parseInt(id.value);\n    }); // remove old appointment\n\n    const updatedAppointments = appointments.filter(appointment => {\n      return appointment.id !== parseInt(id.value);\n    }); //change the appointment\n\n    const newAppointment = actualAppointment.map(appointment => {\n      console.log(appointment); // check availability dentist + assistant on day and time\n\n      const dentist = appointment.dentist.id;\n      const assistant = appointment.assistant.id; //new day & time\n\n      const newAppointmentDay = parseInt(day.value);\n      const newAppointmentTime = parseInt(time.value);\n      const available = checkDentistAssistant(dentist, assistant, newAppointmentDay, newAppointmentTime);\n\n      if (available) {\n        alert(\"day /time conflict, choose another day or time \");\n        return appointment;\n      } else {\n        appointment.day = newAppointmentDay;\n        appointment.time = newAppointmentTime;\n        return appointment;\n      }\n    }); //rescheduled new state of appointments Calendar\n\n    const newState = [...updatedAppointments, ...newAppointment]; // When item on dayview one rescheduled, then remove\n\n    const appointmentsByDay = dentalPractice.appointments.filter(app => app.day === 1);\n    setDentalPractice(prevState => {\n      return { ...prevState,\n        appointments: newState,\n        appointments_by_day: appointmentsByDay\n      };\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 8\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/calendar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 8\n    }\n  }, \"Calendar view\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 8\n    }\n  }, \"Day view\")))), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/calendar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    rescheduleHandler: rescheduleHandler,\n    appointments: dentalPractice.appointments,\n    delete: deleteAppointment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Day, {\n    appointments: dentalPractice.appointments_by_day,\n    delete: deleteAppointment,\n    selectDay: selectDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Home, {\n    dental: dentalPractice,\n    addDentist: addDentist,\n    addPatient: addPatient,\n    handleSickness: handleSickness,\n    addApointmentSubmit: addApointmentSubmit,\n    patientAvailable: patientAvailable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 8\n    }\n  }))))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/ralf2/Desktop/Tandarts-praktijk/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","patients","dentists","assistants","createAppointments","Home","Calendar","Day","App","dentalPractice","setDentalPractice","appointments","appointments_by_day","addPatients","addDentists","addAssistants","addAppointments","prevState","filter","app","day","addDentist","event","preventDefault","name","surname","email","phone","target","newDentist","id","length","value","not_available_due_illness","dentalcrew","dentistState","addPatient","newPatient","patientState","handleSickness","report","map","dentist","checkDentistAssistant","dentistID","assistantID","time","filterByDentist","some","appointment","assistant","addApointmentSubmit","patient","findDentist","find","person","parseInt","findAssistant","newAppointMent","filterDateTime","appointmentsState","unshift","alert","deleteAppointment","appointmentsCopy","updatedAppointments","item","appointmentDayCopy","updatedDay","updatedAppointmentsDay","selectDay","appointmentsByDay","patientAvailable","rescheduleHandler","oldValues","actualAppointment","newAppointment","console","log","newAppointmentDay","newAppointmentTime","available","newState"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport \"./App.css\"\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\r\nimport { patients, dentists, assistants } from \"./utils\"\r\nimport { createAppointments } from \"./createAppointments\"\r\n\r\nimport Home from \"./Home\"\r\nimport Calendar from \"./Calendar\"\r\nimport Day from \"./Day\"\r\n\r\nconst App = () => {\r\n\tconst [dentalPractice, setDentalPractice] = useState({\r\n\t\tpatients: [],\r\n\t\tdentists: [],\r\n\t\tassistants: [],\r\n\t\tappointments: [],\r\n\t\tappointments_by_day: [],\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tconst addPatients = [...dentalPractice.patients, ...patients]\r\n\t\tconst addDentists = [...dentalPractice.dentists, ...dentists]\r\n\t\tconst addAssistants = [...dentalPractice.dentists, ...assistants]\r\n\t\tconst addAppointments = [\r\n\t\t\t...dentalPractice.appointments,\r\n\t\t\t...createAppointments(patients, dentists, assistants),\r\n\t\t]\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\tpatients: addPatients,\r\n\t\t\t\tdentists: addDentists,\r\n\t\t\t\tassistants: addAssistants,\r\n\t\t\t\tappointments: addAppointments,\r\n\t\t\t\tappointments_by_day: addAppointments.filter((app) => {\r\n\t\t\t\t\treturn app.day === 1\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\t\t})\r\n\t}, [])\r\n\r\n\tconst addDentist = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tconst [name, surname, email, phone] = event.target\r\n\t\tconst newDentist = [\r\n\t\t\t{\r\n\t\t\t\tid: dentalPractice.dentists.length + 1,\r\n\t\t\t\tname: name.value,\r\n\t\t\t\tsurname: surname.value,\r\n\t\t\t\temail: email.value,\r\n\t\t\t\tphone: phone.value,\r\n\t\t\t\tnot_available_due_illness: false,\r\n\t\t\t\tdentalcrew: true,\r\n\t\t\t},\r\n\t\t]\r\n\r\n\t\tconst dentistState = [...dentalPractice.dentists, ...newDentist]\r\n\t\tconst addAppointments = createAppointments(\r\n\t\t\tdentalPractice.patients,\r\n\t\t\tdentistState,\r\n\t\t\tdentalPractice.assistants\r\n\t\t)\r\n\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\tdentists: dentistState,\r\n\t\t\t\tappointments: addAppointments,\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst addPatient = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tconst [name, surname, email, phone] = event.target\r\n\t\tconst newPatient = [\r\n\t\t\t{\r\n\t\t\t\tid: dentalPractice.patients.length + 1,\r\n\t\t\t\tname: name.value,\r\n\t\t\t\tsurname: surname.value,\r\n\t\t\t\temail: email.value,\r\n\t\t\t\tphone: phone.value,\r\n\t\t\t},\r\n\t\t]\r\n\t\tconst patientState = [...dentalPractice.patients, ...newPatient]\r\n\t\tconst addAppointments = createAppointments(\r\n\t\t\tpatientState,\r\n\t\t\tdentalPractice.dentists,\r\n\t\t\tdentalPractice.assistants\r\n\t\t)\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\tpatients: patientState,\r\n\t\t\t\tappointments: addAppointments,\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tconst handleSickness = (event, id) => {\r\n\t\tconst report = event.target.value === \"true\" ? true : false\r\n\t\tconst dentistState = [...dentalPractice.dentists]\r\n\t\tdentistState.map((dentist) => {\r\n\t\t\treturn dentist.id === id\r\n\t\t\t\t? (dentist.not_available_due_illness = report)\r\n\t\t\t\t: null\r\n\t\t})\r\n\t\tconst addAppointments = createAppointments(\r\n\t\t\tdentalPractice.patients,\r\n\t\t\tdentistState,\r\n\t\t\tdentalPractice.assistants\r\n\t\t)\r\n\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\tdentists: dentistState,\r\n\t\t\t\tappointments: addAppointments,\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tconst checkDentistAssistant = (dentistID, assistantID, day, time) => {\r\n\t\tconst filterByDentist = dentalPractice.appointments.some((appointment) => {\r\n\t\t\tif (\r\n\t\t\t\t//dentist\r\n\t\t\t\tappointment.dentist.id === dentistID &&\r\n\t\t\t\tappointment.day === day &&\r\n\t\t\t\tappointment.time === time\r\n\t\t\t) {\r\n\t\t\t\treturn appointment\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t//assistant\r\n\t\t\t\tappointment.assistant.id === assistantID &&\r\n\t\t\t\tappointment.day === day &&\r\n\t\t\t\tappointment.time === time\r\n\t\t\t)\r\n\t\t\t\treturn appointment\r\n\t\t\treturn false\r\n\t\t})\r\n\t\treturn filterByDentist\r\n\t}\r\n\r\n\tconst addApointmentSubmit = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\t//form values\r\n\t\tconst [day, time, patient, dentist, assistant] = event.target\r\n\r\n\t\t//dentist data\r\n\t\tconst findDentist = dentalPractice.dentists.find((person) => {\r\n\t\t\treturn person.id === parseInt(dentist.value)\r\n\t\t})\r\n\t\t//assistent data\r\n\t\tconst findAssistant = dentalPractice.assistants.find((person) => {\r\n\t\t\treturn person.id === parseInt(assistant.value)\r\n\t\t})\r\n\t\t//create a new appointment\r\n\t\tlet newAppointMent = {\r\n\t\t\tday: parseInt(day.value),\r\n\t\t\ttime: parseInt(time.value),\r\n\t\t\tpatient: patient.value,\r\n\t\t\tdentist: findDentist,\r\n\t\t\tassistant: findAssistant,\r\n\t\t}\r\n\t\tconst filterDateTime = (newAppointMent, dentalPractice) => {\r\n\t\t\tconst dentist = newAppointMent.dentist.id\r\n\t\t\tconst assistant = newAppointMent.assistant.id\r\n\t\t\tconst day = newAppointMent.day\r\n\t\t\tconst time = newAppointMent.time\r\n\r\n\t\t\tconst filterByDentist = checkDentistAssistant(dentist, assistant, day, time)\r\n\r\n\t\t\tif (!filterByDentist) {\r\n\t\t\t\tconst appointmentsState = [...dentalPractice.appointments]\r\n\t\t\t\tappointmentsState.unshift(newAppointMent)\r\n\t\t\t\tsetDentalPractice((prevState) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...prevState,\r\n\t\t\t\t\t\tappointments: appointmentsState,\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\talert(\r\n\t\t\t\t\t\"The dentist or assistant is not available on this day / time.\"\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\tday.value !== \"\" &&\r\n\t\t\ttime.value !== \"\" &&\r\n\t\t\tpatient.value !== \"Choose Patient\" &&\r\n\t\t\tassistant.value !== \"Choose Assistant\"\r\n\t\t) {\r\n\t\t\tfilterDateTime(newAppointMent, dentalPractice)\r\n\t\t} else {\r\n\t\t\talert(\"fill in all the fields @ add appointment\")\r\n\t\t}\r\n\t}\r\n\r\n\tconst deleteAppointment = (id, day) => {\r\n\t\tif (day !== \"day\") {\r\n\t\t\tconst appointmentsCopy = [...dentalPractice.appointments]\r\n\t\t\tconst updatedAppointments = appointmentsCopy.filter((item) => {\r\n\t\t\t\treturn item.id !== id\r\n\t\t\t})\r\n\t\t\tconst appointmentDayCopy = [...dentalPractice.appointments_by_day]\r\n\t\t\tconst updatedDay = appointmentDayCopy.filter((item) => {\r\n\t\t\t\treturn item.id !== id\r\n\t\t\t})\r\n\r\n\t\t\tsetDentalPractice((prevState) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\tappointments: updatedAppointments,\r\n\t\t\t\t\tappointments_by_day: updatedDay,\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tconst appointmentDayCopy = [...dentalPractice.appointments_by_day]\r\n\t\t\tconst updatedAppointmentsDay = appointmentDayCopy.filter((item) => {\r\n\t\t\t\treturn item.id !== id\r\n\t\t\t})\r\n\t\t\tsetDentalPractice((prevState) => {\r\n\t\t\t\treturn { ...prevState, appointments_by_day: updatedAppointmentsDay }\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tconst selectDay = (event) => {\r\n\t\tconst appointmentsByDay = dentalPractice.appointments.filter(\r\n\t\t\t(app) => app.day === parseInt(event.target.value)\r\n\t\t)\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn { ...prevState, appointments_by_day: appointmentsByDay }\r\n\t\t})\r\n\t}\r\n\r\n\tconst patientAvailable = (name, surname) => {\r\n\t\tconst appointments = [...dentalPractice.appointments]\r\n\t\t// filter appointments\r\n\t\tconst updatedAppointments = appointments.filter((appointment) => {\r\n\t\t\treturn appointment.patient !== `${name} ${surname}`\r\n\t\t})\r\n\t\t//return newstate\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn { ...prevState, appointments: updatedAppointments }\r\n\t\t})\r\n\t}\r\n\tconst rescheduleHandler = (event, oldValues) => {\r\n\t\tevent.preventDefault()\r\n\t\tconst [id, time, day] = event.target\r\n\t\tconst appointments = [...dentalPractice.appointments]\r\n\r\n\t\t//filter out actual appointment\r\n\t\tconst actualAppointment = appointments.filter((appointment) => {\r\n\t\t\treturn appointment.id === parseInt(id.value)\r\n\t\t})\r\n\t\t// remove old appointment\r\n\t\tconst updatedAppointments = appointments.filter((appointment) => {\r\n\t\t\treturn appointment.id !== parseInt(id.value)\r\n\t\t})\r\n\r\n\t\t//change the appointment\r\n\t\tconst newAppointment = actualAppointment.map((appointment) => {\r\n\t\t\tconsole.log(appointment)\r\n\t\t\t// check availability dentist + assistant on day and time\r\n\t\t\tconst dentist = appointment.dentist.id\r\n\t\t\tconst assistant = appointment.assistant.id\r\n\t\t\t//new day & time\r\n\t\t\tconst newAppointmentDay = parseInt(day.value)\r\n\t\t\tconst newAppointmentTime = parseInt(time.value)\r\n\r\n\t\t\tconst available = checkDentistAssistant(\r\n\t\t\t\tdentist,\r\n\t\t\t\tassistant,\r\n\t\t\t\tnewAppointmentDay,\r\n\t\t\t\tnewAppointmentTime\r\n\t\t\t)\r\n\t\t\tif (available) {\r\n\t\t\t\talert(\"day /time conflict, choose another day or time \")\r\n\t\t\t\treturn appointment\r\n\t\t\t} else {\r\n\t\t\t\tappointment.day = newAppointmentDay\r\n\t\t\t\tappointment.time = newAppointmentTime\r\n\t\t\t\treturn appointment\r\n\t\t\t}\r\n\t\t})\r\n\t\t//rescheduled new state of appointments Calendar\r\n\t\tconst newState = [...updatedAppointments, ...newAppointment]\r\n\t\t// When item on dayview one rescheduled, then remove\r\n\t\tconst appointmentsByDay = dentalPractice.appointments.filter((app) => app.day === 1)\r\n\t\tsetDentalPractice((prevState) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevState,\r\n\t\t\t\tappointments: newState,\r\n\t\t\t\tappointments_by_day: appointmentsByDay,\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/calendar\">Calendar view</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/day\">Day view</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<main>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/calendar\">\r\n\t\t\t\t\t\t\t<Calendar\r\n\t\t\t\t\t\t\t\trescheduleHandler={\r\n\t\t\t\t\t\t\t\t\trescheduleHandler\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tappointments={\r\n\t\t\t\t\t\t\t\t\tdentalPractice.appointments\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdelete={deleteAppointment}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/day\">\r\n\t\t\t\t\t\t\t<Day\r\n\t\t\t\t\t\t\t\tappointments={\r\n\t\t\t\t\t\t\t\t\tdentalPractice.appointments_by_day\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdelete={deleteAppointment}\r\n\t\t\t\t\t\t\t\tselectDay={selectDay}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t\t\t<Home\r\n\t\t\t\t\t\t\t\tdental={dentalPractice}\r\n\t\t\t\t\t\t\t\taddDentist={addDentist}\r\n\t\t\t\t\t\t\t\taddPatient={addPatient}\r\n\t\t\t\t\t\t\t\thandleSickness={handleSickness}\r\n\t\t\t\t\t\t\t\taddApointmentSubmit={\r\n\t\t\t\t\t\t\t\t\taddApointmentSubmit\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tpatientAvailable={patientAvailable}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t)\r\n}\r\nexport default App"]},"metadata":{},"sourceType":"module"}